# difference transformed data once at lag 1
y1 <- diff(prices_bc, lag = 1)
plot(y1, main = "Plot of Box-Cox Transformed + Differenced Data", xlab = "Year", ylab = "Transformed Values")
abline(h = mean(y1), col = "red")
paste("Variance of Box-Cox Transformed Data: ", var(prices_bc))
paste("Variance of Box-Cox Transformed and Differenced Data: ", var(y1))
# difference transformed + differenced data at lag 4
y14 <- diff(y1, lag = 4)
plot(y14, main = "Plot of Box-Cox Transformed + Differenced^2 Data", xlab = "Year", ylab = "Transformed Values")
abline(h = mean(y14), col = "red")
paste("Variance of Box-Cox Transformed Data: ", var(y1))
paste("Variance of Box-Cox Transformed and Differenced (twice) Data: ", var(y14))
acf(y1, lag.max = 40, main = "ACF of Box-Cox Transformed Data Differenced at Lag 1")
pacf(y1, lag.max = 40, main = "PACF of Box-Cox Transformed Data Differenced at Lag 1")
# q = 1, Q = 2
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), method = "ML")
paste("AICc of model with q = 1, Q = 2, p = P = 0: ",
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), method = "ML"))
)
# q = 1, Q = 2, Q1 fixed
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), fixed = c(NA, 0, NA), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), fixed = c(NA, 0, NA), method = "ML"))
# p = 1, P = 2
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
paste("AICc of model with p = 1, P = 2, q = Q = 0: ",
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML"))
)
# p = 1, P = 2, P1 fixed
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), fixed = c(NA, 0, NA), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), fixed = c(NA, 0, NA), method = "ML"))
# p = 1, q = 0, P = 2, Q = 2
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
paste("AICc of model with p = 1, P = 2, q = 0, Q = 2: ",
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
)
# models not shown
# q = 1, Q = 0
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML"))
# p = 1, P = 0
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML"))
# p = 0, P = 2
arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML"))
# p = 0, q = 1, P = 2, Q = 2
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
# p = 0, q = 0, P = 2, Q = 2
arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
# p = 1, q = 1, P = 2, Q = 2
arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
# p = 1, q = 1, P = 2, Q = 2, p1 = q1 = 0
arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, 0, NA, NA, NA, NA), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, 0, NA, NA, NA, NA), method = "ML"))
# p = 1, q = 1, P = 2, Q = 2, p1 = 0
arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, NA, NA, NA, NA, NA), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, NA, NA, NA, NA, NA), method = "ML"))
par(mfrow = c(1, 3))
# plot the roots and inverse roots of the model's characteristic equations
source("plot.roots.R")
plot.roots(polyroot(c(1, 0.3223)), NULL, main = "Roots of Nonseasonal AR Component")
plot.roots(NULL, polyroot(c(1, -0.6068, 0.7883)), main = "Roots of Seasonal MA Component")
plot.roots(polyroot(c(1, -0.3821, 0.8471)), NULL, main = "Roots of Seasonal AR Component")
par(mfrow = c(1, 3))
# fit model 1 to transformed data
fit1 <- arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
# retrieve residuals from model 1's fit
res1 <- residuals(fit1)
# visualize residuals of model 1
plot.ts(res1, main = "Plot of Residuals", xlab = "Year", ylab = "Value")
abline(h = mean(res1), col = "red")
hist(res1, main = "Histogram of Residual Values")
qqnorm(res1, main = "Normal Q-Q Plot of Residual Values")
qqline(res1, col = "blue")
par(mfrow = c(1, 2))
acf(res1, lag.max = 40, main = "ACF of Model 1 Residuals")
pacf(res1, lag.max = 40, main = "PACF of Model 1 Residuals")
# Shapiro-Wilk
shapiro.test(res1)
# Box-Pierce
Box.test(res1, lag = 12, type = "Box-Pierce", fitdf = 5)
# Box-Ljung
Box.test(res1, lag = 12, type = "Ljung-Box", fitdf = 5)
# McLeod-Li
Box.test((res1^2), lag = 12, type = "Ljung-Box", fitdf = 0)
# fit residuals to ar model
ar(res1, aic = T, order.max = NULL, method = c("yule-walker"))
par(mfrow = c(1, 2))
# roots and inverse roots of model 2's characteristic equations
plot.roots(polyroot(c(1, 0.3190)), NULL, main = "Roots of Nonseasonal AR Component")
plot.roots(polyroot(c(1, -0.1329, 0.2675)), NULL, main = "Roots of Seasonal AR Component")
par(mfrow = c(1, 3))
# fit model 2 to transformed data
fit2 <- arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
# retrieve model 2's residuals
res2 <- residuals(fit2)
# visualize model 2 residuals
plot.ts(res2, main = "Plot of Residuals", xlab = "Year", ylab = "Value")
abline(h = mean(res2), col = "red")
hist(res2, main = "Histogram of Residual Values")
qqnorm(res2, main = "Normal Q-Q Plot of Residual Values")
qqline(res2, col = "blue")
par(mfrow = c(1, 2))
acf(res2, lag.max = 40, main = "ACF of Model 2 Residuals")
pacf(res2, lag.max = 40, main = "PACF of Model 2 Residuals")
# Shapiro-Wilk
shapiro.test(res2)
# Box-Pierce
Box.test(res2, lag = 12, type = "Box-Pierce", fitdf = 3)
# Box-Ljung
Box.test(res2, lag = 12, type = "Ljung-Box", fitdf = 3)
# McLeod-Li
Box.test((res2^2), lag = 12, type = "Ljung-Box", fitdf = 0)
# fit model 2's residuals to ar model
ar(res2, aic = T, order.max = NULL, method = c("yule-walker"))
# predict 7 points ahead of fit1's data (Box-Cox transformed data)
bc_pred <- predict(fit1, n.ahead = 7)
# calculate upper and lower bounds of 95% confidence interval
upper_pred <- bc_pred$pred + (2 * bc_pred$se)
lower_pred <- bc_pred$pred - (2 * bc_pred$se)
# create time series data from predictions
pred_ts <- ts(data = bc_pred$pred, start = c(2023, 1), end = c(2024, 3), frequency = 4)
ts.plot(prices_bc, xlim = c(1985, 2025), ylim = c(2.84, 2.88), main = "Forecast of Transformed Data Using Model 1", xlab = "Year", ylab = "Price")
lines(upper_pred, col = "blue", lty = "dashed")
lines(lower_pred, col = "blue", lty = "dashed")
points(pred_ts, col = "red")
# retrieve the inverse Box-Cox transformed forecasted values
og_pred_ts <- InvBoxCox(bc_pred$pred, lambda = optimal_lambda)
# calculate upper and lower bounds of 95% C.I. for original data forecasts
U = InvBoxCox(upper_pred, optimal_lambda)
L = InvBoxCox(lower_pred, optimal_lambda)
ts.plot(prices_train, xlim = c(1985, 2025), ylim = c(50000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
# visualize predicted values on original data compared to true values
ts.plot(prices, xlim = c(2020, 2025), ylim = c(140000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
?AICc
install.packages("xelatex")
library(knitr)
library(tidyverse)
library(readxl)
production_data <- read_xlsx("~/Downloads/oilgascounty.xls")
production_data <- read_xls("~/Downloads/oilgascounty.xls")
View(production_data)
production_data <- read_xls("~/Downloads/oilgascounty.xls") %>%
filter(
County_Name %in% c("Santa Barbara County", "Ventura County", "San Luis Obispo County")
)
View(production_data)
library(tidyverse)
library(readxl)
# data taken from https://www.ers.usda.gov/data-products/county-level-oil-and-gas-production-in-the-united-states
production_data <- read_xls("~/Downloads/oilgascounty.xls") %>%
filter(
County_Name %in% c("Santa Barbara County", "Ventura County", "San Luis Obispo County")
)
oil_data <- production_data %>%
select(
c(County_Name, starts_with("oil2"))
) %>%
pivot_longer(
cols = starts_with("oil2"),
names_to = "Year",
names_prefix = "oil",
values_to = "Oil"
) %>%
mutate(
Year = as.numeric(Year)
)
gas_data <- production_data %>%
select(
c(County_Name, starts_with("gas2"))
) %>%
pivot_longer(
cols = starts_with("gas"),
names_to = "Year",
names_prefix = "gas",
values_to = "Gas"
) %>%
mutate(
Year = as.numeric(Year)
)
oil_data %>%
ggplot(
aes(
x = Year, y = Oil, color = County_Name
)
) +
geom_line() +
ylim(0, NA) +
theme_bw() +
ggtitle("County-Level Oil Production 2000-2011") +
ylab("Oil (barrels)")
gas_data %>%
ggplot(
aes(
x = Year, y = Gas, color = County_Name
)
) +
geom_line() +
ylim(0, NA) +
theme_bw() +
ggtitle("County-Level Gas Production 2000-2011") +
ylab("Gas (1000 cubic ft)")
library(tidyverse)
library(readxl)
# data taken from https://www.ers.usda.gov/data-products/county-level-oil-and-gas-production-in-the-united-states
production_data <- read_xls("~/Downloads/oilgascounty.xls") %>%
filter(
County_Name %in% c("Santa Barbara County", "Ventura County", "San Luis Obispo County")
)
oil_data <- production_data %>%
select(
c(County_Name, starts_with("oil2"))
) %>%
pivot_longer(
cols = starts_with("oil2"),
names_to = "Year",
names_prefix = "oil",
values_to = "Oil"
) %>%
mutate(
Year = as.numeric(Year)
)
gas_data <- production_data %>%
select(
c(County_Name, starts_with("gas2"))
) %>%
pivot_longer(
cols = starts_with("gas"),
names_to = "Year",
names_prefix = "gas",
values_to = "Gas"
) %>%
mutate(
Year = as.numeric(Year)
)
oil_data %>%
ggplot(
aes(
x = Year, y = Oil, color = County_Name
)
) +
geom_line() +
ylim(0, NA) +
theme_bw() +
ggtitle("County-Level Oil Production 2000-2011") +
ylab("Oil (barrels)")
gas_data %>%
ggplot(
aes(
x = Year, y = Gas, color = County_Name
)
) +
geom_line() +
ylim(0, NA) +
theme_bw() +
ggtitle("County-Level Gas Production 2000-2011") +
ylab("Gas (1000 cubic ft)")
oil_data %>%
ggplot(
aes(
x = Year, y = Oil, color = County_Name
)
) +
geom_line() +
ylim(0, NA) +
theme_bw() +
ggtitle("County-Level Oil Production 2000-2011") +
ylab("Oil (barrels)")
gas_data %>%
ggplot(
aes(
x = Year, y = Gas, color = County_Name
)
) +
geom_line() +
ylim(0, NA) +
theme_bw() +
ggtitle("County-Level Gas Production 2000-2011") +
ylab("Gas (1000 cubic ft)")
library(tidyverse)
library(DBI)
library(duckdb)
library(duckplyr)
con <- dbConnect(duckdb(), dbdir = ":memory:")
df1 <- tbl(
con,
sql(
"
SELECT *
FROM read_csv_auto('~/remote_data/tls201_appln.csv')
WHERE appln_auth = 'EP'
AND appln_filing_year = 2015
"
)
)
df1 <- tbl(
con,
sql(
"
SELECT *
FROM read_csv_auto('~/remote_data/tls201_appln.csv')
WHERE appln_auth = 'EP'
AND appln_filing_year = 2015
"
)
)
con <- dbConnect(duckdb(), dbdir = ":memory:")
df1 <- tbl(
con,
sql(
"
SELECT *
FROM read_csv_auto('~/remote_data/tls201_appln.csv')
WHERE appln_auth = 'EP'
AND appln_filing_year = 2015
"
)
)
df1 <- df1 %>%
collect() # query is executed and data enters R memory
library(DBI)
library(RMariaDB)
con <- dbConnect(
MariaDB(),
user = "root",
password = "Th1sSh0uldB3S@f3N0w",
dbname = "sample_data",
host = "healthinnovationlab.tmp.ucsb.edu",
port = 3306
)
con <- dbConnect(
MariaDB(),
user = "root",
password = "Th1sSh0uldB3S@f3N0w",
dbname = "sample_data",
host = "healthinnovationlab.tmp.ucsb.edu",
port = 3306
)
con <- dbConnect(
MariaDB(),
user = "root",
password = "Th1sSh0uldB3S@f3N0w",
dbname = "sample_data",
host = "healthinnovationlab.tmp.ucsb.edu",
port = 3306
)
con <- dbConnect(
RMariaDB::MariaDB(),
user = "root",
password = "Th1sSh0uldB3S@f3N0w",
dbname = "sample_data",
host = "healthinnovationlab.tmp.ucsb.edu",
port = 3306
)
con <- dbConnect(
RMariaDB::MariaDB(),
user = "root",
password = "Th1sSh0uldB3S@f3N0w",
dbname = "sample_data",
host = "healthinnovationlab.tmp.ucsb.edu",
port = 3306,
ssl.verify = F
)
con <- dbConnect(
RMariaDB::MariaDB(),
user = "root",
password = "Th1sSh0uldB3S@f3N0w",
dbname = "sample_data",
host = "healthinnovationlab.tmp.ucsb.edu",
port = 3307,
)
con <- dbConnect(
RMariaDB::MariaDB(),
user = "root",
password = "Th1sSh0uldB3S@f3N0w",
dbname = "sample_data",
host = "127.0.0.1",
port = 3307,
)
tables <- dbListTables(con)
str(tables)
tls201 <- dbGetQuery(
con,
"SELECT * FROM tls201_appln LIMIT 500"
)
View(tls201)
# always run when done connecting
dbDisconnect(con)
?dbConnect
?collect
library(tidyverse)
works_authorships <- read.csv("~/Desktop/csv-files-mysql/works_authorships.csv")
View(works_authorships)
works_authorships <- read.csv("~/Desktop/csv-files-mysql/works_authorships.csv")
View(works_authorships)
sources <- read.csv("~/Downloads/sources.csv")
View(sources)
library(tidyverse)
library(readxl)
library(httr)
## correct year variable, turn TOT_EMP into numeric variable
data <- read.csv("./Data/MSA_ALL_YEARS.csv") %>%
mutate(
year = year + 2000,
TOT_EMP = as.numeric(TOT_EMP)
)
setwd("~/Desktop/PSTAT 197/Projects/capstone-project2035")
## correct year variable, turn TOT_EMP into numeric variable
data <- read.csv("./Data/MSA_ALL_YEARS.csv") %>%
mutate(
year = year + 2000,
TOT_EMP = as.numeric(TOT_EMP)
)
data$AREA_TITLE[data$AREA_TITLE == "Oxnard-Thousand Oaks-Ventura, CA"] <- "Ventura"
data$AREA_TITLE[data$AREA_TITLE == "Ventura, CA PMSA"] <- "Ventura"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Paso Robles, CA"] <- "San Luis Obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Paso Robles-Arroyo Grande, CA"] <- "San Luis Obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Atascadero-Paso Robles, CA M"] <- "San Luis Obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Atascadero-Paso Robles, CA MSA"] <- "San Luis Obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Paso Robles, CA"] <- "San Luis Obispo"
data$AREA_TITLE[data$AREA_TITLE == "Santa Barbara-Santa Maria-Lompoc, CA MSA"] <- "Santa Barbara"
data$AREA_TITLE[data$AREA_TITLE == "Santa Maria-Santa Barbara, CA"] <- "Santa Barbara"
data$AREA_TITLE[data$AREA_TITLE == "Santa Barbara-Santa Maria, CA"] <- "Santa Barbara"
data$AREA_TITLE[data$AREA_TITLE == "Santa Barbara-Santa Maria-Goleta, CA"] <- "Santa Barbara"
data$label[data$label == "ff job"] <- "Fossil Fuel"
data$label[data$label == "green job"] <- "Green"
## standardize occupation titles
data$OCC_TITLE <- tolower(data$OCC_TITLE)
temp_county = NA
temp_label = NA
for (i in 1:nrow(data)){
if (is.na(data[i, ]$TOT_EMP)){
temp_county = data[i, ]$AREA_TITLE
temp_label = data[i, ]$label
data[i, ]$TOT_EMP = median(data$TOT_EMP[data$AREA_TITLE == temp_county & data$label == temp_label], na.rm = T)
}
}
## composite BLS
p3 <- data %>%
filter(
year > 2004
) %>%
group_by(
AREA_TITLE, year, label
) %>%
summarize(
count = sum(TOT_EMP)
) %>%
ggplot(
aes(
x = year, y = count, color = label
)
) +
geom_line() +
labs(x = "Year", y = "Count") +
facet_grid(~ AREA_TITLE) +
theme_bw(base_size = 12) +
theme(legend.position = "none", strip.text = element_blank()) +
scale_x_continuous(breaks = c(2005, 2010, 2015, 2020), labels = c("2005", "2010", "2015", "2020"))
p3
source("~/Desktop/PSTAT 197/2035data.R")
## composite BLS
p3 <- data %>%
filter(
year > 2004
) %>%
group_by(
AREA_TITLE, year, label
) %>%
summarize(
count = sum(TOT_EMP)
) %>%
ggplot(
aes(
x = year, y = count, color = label
)
) +
geom_line() +
labs(x = "Year", y = "Count") +
facet_grid(~ AREA_TITLE) +
theme_bw(base_size = 12) +
scale_x_continuous(breaks = c(2005, 2010, 2015, 2020), labels = c("2005", "2010", "2015", "2020"))
p3
p3 + theme(legend.position = c(0.5, 0.8))
## mean wage by county and occupation type
weighted_wage %>%
group_by(
year, county, occ_type
) %>%
summarize(
weighted_avg = mean(weighted_avg)
) %>%
ggplot(
aes(x = year, y = weighted_avg, color = occ_type)
) +
geom_line() +
labs(x = "Year", y = "Mean Wage ($)", color = "Job Type") +
facet_grid(~ county) +
theme_bw(base_size = 15) +
theme(legend.position = c(0.5, 0.8))
p3 + theme(legend.position = c(0.5, 0.8))
p3 + theme(legend.position = c(0.5, 0.8)) + labs(color = "Job Type")
source("~/Desktop/PSTAT 197/2035data.R")
