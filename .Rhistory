Box.test(res1, lag = 12, type = "Box-Pierce", fitdf = 5)
# Box-Ljung
Box.test(res1, lag = 12, type = "Ljung-Box", fitdf = 5)
# McLeod-Li
Box.test((res1^2), lag = 12, type = "Ljung-Box", fitdf = 0)
ar(res1, aic = T, order.max = NULL, method = c("yule-walker"))
par(mfrow = c(1, 2))
plot.roots(polyroot(c(1, 0.3190)), NULL, main = "Roots of Nonseasonal AR Component")
plot.roots(polyroot(c(1, -0.1329, 0.2675)), NULL, main = "Roots of Seasonal AR Component")
par(mfrow = c(1, 3))
fit2 <- arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
res2 <- residuals(fit2)
plot.ts(res2, main = "Plot of Residuals", xlab = "Year", ylab = "Value")
abline(h = mean(res2), col = "red")
hist(res2, main = "Histogram of Residual Values")
qqnorm(res2, main = "Normal Q-Q Plot of Residual Values")
qqline(res2, col = "blue")
par(mfrow = c(1, 2))
acf(res2, lag.max = 40, main = "ACF of Model 2 Residuals")
pacf(res2, lag.max = 40, main = "PACF of Model 2 Residuals")
shapiro.test(res2)
# Box-Pierce
Box.test(res2, lag = 12, type = "Box-Pierce", fitdf = 3)
# Box-Ljung
Box.test(res2, lag = 12, type = "Ljung-Box", fitdf = 3)
# McLeod-Li
Box.test((res2^2), lag = 12, type = "Ljung-Box", fitdf = 0)
ar(res2, aic = T, order.max = NULL, method = c("yule-walker"))
bc_pred <- predict(fit1, n.ahead = 7)
upper_pred <- bc_pred$pred + (2 * bc_pred$se)
lower_pred <- bc_pred$pred - (2 * bc_pred$se)
ts.plot(prices_bc, xlim = c(1, length(prices_bc) + 7), ylim = c(min(prices_bc), max(upper_pred)))
lines(upper_pred, col = "blue", lty = "dashed")
lines(lower_pred, col = "blue", lty = "dashed")
points((length(prices_bc) + 1):(length(prices_bc) + 7), bc_pred$pred, col = "red")
bc_pred <- predict(fit1, n.ahead = 7)
upper_pred <- bc_pred$pred + (2 * bc_pred$se)
lower_pred <- bc_pred$pred - (2 * bc_pred$se)
ts.plot(prices_bc) #, xlim = c(1, length(prices_bc) + 7), ylim = c(min(prices_bc), max(upper_pred)))
lines(upper_pred, col = "blue", lty = "dashed")
lines(lower_pred, col = "blue", lty = "dashed")
points((length(prices_bc) + 1):(length(prices_bc) + 7), bc_pred$pred, col = "red")
bc_pred <- predict(fit1, n.ahead = 7)
upper_pred <- bc_pred$pred + (2 * bc_pred$se)
lower_pred <- bc_pred$pred - (2 * bc_pred$se)
ts.plot(prices_bc, xlim = c(1985, 2024), ylim = c(2.84, 2.88)) #, xlim = c(1, length(prices_bc) + 7), ylim = c(min(prices_bc), max(upper_pred)))
lines(upper_pred, col = "blue", lty = "dashed")
lines(lower_pred, col = "blue", lty = "dashed")
points((length(prices_bc) + 1):(length(prices_bc) + 7), bc_pred$pred, col = "red")
bc_pred <- predict(fit1, n.ahead = 7)
upper_pred <- bc_pred$pred + (2 * bc_pred$se)
lower_pred <- bc_pred$pred - (2 * bc_pred$se)
ts.plot(prices_bc, xlim = c(1985, 2025), ylim = c(2.84, 2.88)) #, xlim = c(1, length(prices_bc) + 7), ylim = c(min(prices_bc), max(upper_pred)))
lines(upper_pred, col = "blue", lty = "dashed")
lines(lower_pred, col = "blue", lty = "dashed")
points((length(prices_bc) + 1):(length(prices_bc) + 7), bc_pred$pred, col = "red")
bc_pred <- predict(fit1, n.ahead = 7)
upper_pred <- bc_pred$pred + (2 * bc_pred$se)
lower_pred <- bc_pred$pred - (2 * bc_pred$se)
ts.plot(prices_bc, xlim = c(1985, 2024), ylim = c(2.84, 2.88)) #, xlim = c(1, length(prices_bc) + 7), ylim = c(min(prices_bc), max(upper_pred)))
lines(upper_pred, col = "blue", lty = "dashed")
lines(lower_pred, col = "blue", lty = "dashed")
points((length(prices_bc) + 1):(length(prices_bc) + 7), bc_pred$pred, col = "red")
?points
upper_pred
pred_ts <- ts(data = bc_pred$pred, start = c(2023, 1), end = c(2024, 3), frequency = 4)
bc_pred <- predict(fit1, n.ahead = 7)
upper_pred <- bc_pred$pred + (2 * bc_pred$se)
lower_pred <- bc_pred$pred - (2 * bc_pred$se)
pred_ts <- ts(data = bc_pred$pred, start = c(2023, 1), end = c(2024, 3), frequency = 4)
ts.plot(prices_bc, xlim = c(1985, 2024), ylim = c(2.84, 2.88)) #, xlim = c(1, length(prices_bc) + 7), ylim = c(min(prices_bc), max(upper_pred)))
lines(upper_pred, col = "blue", lty = "dashed")
lines(lower_pred, col = "blue", lty = "dashed")
#points((length(prices_bc) + 1):(length(prices_bc) + 7), bc_pred$pred, col = "red")
points(pred_ts, col = "red")
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(rvest)
library(jsonlite)
library(tidyverse)
library(reticulate)
library(dplyr)
library(stringr)
reticulate::repl_python()
#save sitemap
sitemap_html <- py$sitemap_html
writeLines(sitemap_html, "sitemap.html")
reticulate::repl_python()
library(tidyverse)
library(readxl)
library(httr)
## correct year variable, turn TOT_EMP into numeric variable
data <- read.csv("./Data/MSA_ALL_YEARS.csv") %>%
mutate(
year = year + 2000,
TOT_EMP = as.numeric(TOT_EMP)
)
setwd("~/Desktop/PSTAT 197/Projects/capstone-project2035")
library(tidyverse)
library(readxl)
library(httr)
## correct year variable, turn TOT_EMP into numeric variable
data <- read.csv("./Data/MSA_ALL_YEARS.csv") %>%
mutate(
year = year + 2000,
TOT_EMP = as.numeric(TOT_EMP)
)
## correct county names
data$AREA_TITLE[data$AREA_TITLE == "Oxnard-Thousand Oaks-Ventura, CA"] <- "Ventura"
data$AREA_TITLE[data$AREA_TITLE == "Ventura, CA PMSA"] <- "Ventura"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Paso Robles, CA"] <- "San Luis Obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Paso Robles-Arroyo Grande, CA"] <- "San Luis Obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Atascadero-Paso Robles, CA M"] <- "San Luis Obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Atascadero-Paso Robles, CA MSA"] <- "San Luis Obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Paso Robles, CA"] <- "San Luis Obispo"
data$AREA_TITLE[data$AREA_TITLE == "Santa Barbara-Santa Maria-Lompoc, CA MSA"] <- "Santa Barbara"
data$AREA_TITLE[data$AREA_TITLE == "Santa Maria-Santa Barbara, CA"] <- "Santa Barbara"
data$AREA_TITLE[data$AREA_TITLE == "Santa Barbara-Santa Maria, CA"] <- "Santa Barbara"
data$AREA_TITLE[data$AREA_TITLE == "Santa Barbara-Santa Maria-Goleta, CA"] <- "Santa Barbara"
## standardize occupation titles
data$OCC_TITLE <- tolower(data$OCC_TITLE)
## impute missing TOT_EMP values with the median value for that specific county and job type
temp_county = NA
temp_label = NA
for (i in 1:nrow(data)){
if (is.na(data[i, ]$TOT_EMP)){
temp_county = data[i, ]$AREA_TITLE
temp_label = data[i, ]$label
data[i, ]$TOT_EMP = median(data$TOT_EMP[data$AREA_TITLE == temp_county & data$label == temp_label], na.rm = T)
}
}
## create dfs of total ff/green job counts across counties
ff_total_count <- data %>%
filter(label == "ff job") %>%
group_by(year) %>%
summarize(jobs = sum(TOT_EMP))
green_total_count <- data %>%
filter(label == "green job") %>%
group_by(year) %>%
summarize(jobs = sum(TOT_EMP))
## ff/green job counts by county
ff_county_count <- data %>%
filter(
label == "ff job"
) %>%
group_by(
year, AREA_TITLE
) %>%
summarize(
jobs = sum(TOT_EMP)
)
green_county_count <- data %>%
filter(
label == "green job"
) %>%
group_by(
year, AREA_TITLE
) %>%
summarize(
jobs = sum(TOT_EMP)
)
## creating specific occupation employment dfs
ff_jobs <- data %>%
filter(label == "ff job") %>%
mutate(
occupation = if_else(
OCC_TITLE %in% c("derrick operators, oil and gas", "rotary drill operators, oil and gas", "service unit operators, oil and gas", "service unit operators, oil, gas, and mining"),
"extraction unit operators",
if_else(
OCC_TITLE %in% c("earth drillers, except oil and gas", "earth drillers, except oil and gas; and explosive workers, ordnance handling experts, and blasters"),
"earth drillers",
if_else(
OCC_TITLE %in% c("helpers--extraction workers", "roustabouts, oil and gas"),
"extraction helpers",
"surface miners")
)
)
) %>%
group_by(year, occupation) %>%
summarize(jobs = sum(TOT_EMP))
green_jobs_list <- list(
c("architectural and engineering managers", "engineering managers", "industrial production managers", "managers, all other", "transportation, storage, and distribution managers"),
c("civil engineers", "electrical engineers", "mechanical engineers", "geological and petroleum technicians", "engineers, all other"),
c("construction and related workers, all other", "first-line supervisors of construction trades and extraction workers", "first-line supervisors/managers of construction trades and extraction workers", "sheet metal workers", "solar photovoltaic installers"),
c("installation, maintenance, and repair workers, all other", "machinists", "maintenance and repair workers, general", "plant and system operators, all other", "power plant operators", "power distributors and dispatchers", "separating, filtering, clarifying, precipitating, and still machine setters, operators, and tenders"),
c("sales representatives, wholesale and manufacturing, technical and scientific products")
)
green_jobs <- data %>%
filter(label == "green job") %>%
mutate(
occupation = ifelse(
OCC_TITLE %in% green_jobs_list[[1]],
"managers",
ifelse(
OCC_TITLE %in% green_jobs_list[[2]],
"engineers/technicians",
ifelse(
OCC_TITLE %in% green_jobs_list[[3]],
"construction/skilled trades",
ifelse(
OCC_TITLE %in% green_jobs_list[[4]],
"operations/maintenance",
"sales"
)
)
)
)
) %>%
group_by(year, occupation) %>%
summarize(jobs = sum(TOT_EMP))
## jobs across all counties
ff_total_count %>%
ggplot(
aes(x = year, y = jobs)
) +
geom_line() +
ylim(0, 600) +
labs(title = "Fossil Fuel Jobs on Central Coast 2001-2023", x = "Year", y = "Jobs") +
theme_bw()
## jobs by county
ff_county_count %>%
ggplot(
aes(
x = year, y = jobs, color = AREA_TITLE
)
) +
geom_line() +
ylim(0, 425) +
labs(title = "Fossil Fuel Jobs by County 2001-2023", x = "Year", y = "Jobs", color = "County") +
theme_bw()
## jobs across all counties
ff_total_count %>%
ggplot(
aes(x = year, y = jobs)
) +
geom_line() +
ylim(0, 600) +
labs(title = "Fossil Fuel Jobs on Central Coast 2001-2023", x = "Year", y = "Count") +
theme_bw()
green_total_count %>%
ggplot(
aes(x = year, y = jobs)
) +
geom_line() +
ylim(0, 25000) +
labs(title = "Green Jobs on Central Coast 2001-2023", x = "Year", y = "Count") +
theme_bw()
## jobs by county
ff_county_count %>%
ggplot(
aes(
x = year, y = jobs, color = AREA_TITLE
)
) +
geom_line() +
ylim(0, 425) +
labs(title = "Fossil Fuel Jobs by County 2001-2023", x = "Year", y = "Count", color = "County") +
theme_bw()
green_county_count %>%
ggplot(
aes(
x = year, y = jobs, color = AREA_TITLE
)
) +
geom_line() +
ylim(0, 12000) +
labs(title = "Green Jobs by County 2001-2023", x = "Year", y = "Count", color = "County") +
theme_bw()
## specific jobs across years
ff_jobs %>%
ggplot(
aes(
x = year, y = jobs, color = occupation
)
) +
geom_line() +
ylim(0, 425) +
labs(title = "Employment by Fossil Fuel Occupation 2001-2023", x = "Year", y = "Count", color = "Occupation") +
theme_bw()
green_jobs %>%
ggplot(
aes(
x = year, y = jobs, color = occupation
)
) +
geom_line() +
ylim(0, 8250) +
labs(title = "Employment by Green Occupation 2001-2023", x = "Year", y = "Count", color = "Occupation") +
theme_bw()
library(tidyverse)
library(readxl)
library(MuMIn)
library(forecast)
# read in data
housing <- read_xlsx("~/Desktop/PSTAT 174/Project/medians_po_mh.xlsx")
# remove first three rows (headers, column names)
housing <- housing[-c(1:3), ]
# rename variables
colnames(housing) <- c("area", "year", "quarter", "median_price")
# convert price to a numeric variable
housing$median_price <- as.numeric(housing$median_price)
# create time series from "median_price" variable
# frequency = number of observations per cycle (a year is a cycle)
prices <- ts(housing$median_price, frequency = 4, start = c(1985, 1), end = c(2024, 3))
# training set
prices_train <- ts(prices[c(1:152)], frequency = 4, start = c(1985, 1), end = c(2022, 4))
# testing set
prices_test <- ts(prices[c(153:159)], frequency = 4, start = c(2023, 1), end = c(2024, 3))
plot(prices_train, main = "Median House Prices 1985-2024 (USA)", ylab = "Median Price ($)", xlab = "Year")
par(mfrow = c(1, 2))
hist(prices_train, main = "Histogram of Housing Prices", xlab = "Median Price ($)", col = "light blue")
acf(prices_train, lag.max = 50, main = "ACF of Housing Prices")
par(mfrow = c(1, 2))
t <- 1:length(prices_train)
bc_trans <- MASS::boxcox(prices_train ~ t, plotit = T)
optimal_lambda <- bc_trans$x[which(bc_trans$y == max(bc_trans$y))]
prices_bc <- (1 / optimal_lambda) * (prices_train^optimal_lambda - 1)
hist(prices_bc, main = "Box-Cox Transformed Data", xlab = "Transformed Values", col = "light blue")
components <- decompose(prices_bc)
plot(components)
y1 <- diff(prices_bc, lag = 1)
plot(y1, main = "Plot of Box-Cox Transformed + Differenced Data", xlab = "Year", ylab = "Transformed Values")
abline(h = mean(y1), col = "red")
paste("Variance of Box-Cox Transformed Data: ", var(prices_bc))
paste("Variance of Box-Cox Transformed and Differenced Data: ", var(y1))
y14 <- diff(y1, lag = 4)
plot(y14, main = "Plot of Box-Cox Transformed + Differenced^2 Data", xlab = "Year", ylab = "Transformed Values")
abline(h = mean(y14), col = "red")
paste("Variance of Box-Cox Transformed Data: ", var(y1))
paste("Variance of Box-Cox Transformed and Differenced (twice) Data: ", var(y14))
acf(y1, lag.max = 40, main = "ACF of Box-Cox Transformed Data Differenced at Lag 1")
pacf(y1, lag.max = 40, main = "PACF of Box-Cox Transformed Data Differenced at Lag 1")
# q = 1, Q = 2
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), method = "ML"))
# q = 1, Q = 2, Q1 fixed
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), fixed = c(NA, 0, NA), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 2), period = 4), fixed = c(NA, 0, NA), method = "ML"))
# p = 1, P = 2
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML"))
# p = 1, P = 2, P1 = 0
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), fixed = c(NA, 0, NA), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), fixed = c(NA, 0, NA), method = "ML"))
# p = 1, q = 0, P = 2, Q = 2
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
# p = 1, q = 1, P = 2, Q = 2 (ar1 set to 0)
arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, NA, NA, NA, NA, NA), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, NA, NA, NA, NA, NA), method = "ML"))
# models not shown
# q = 1, Q = 0
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML"))
# p = 1, P = 0
arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(0, 0, 0), period = 4), method = "ML"))
# p = 0, P = 2
arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML"))
# p = 0, q = 1, P = 2, Q = 2
arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
# p = 0, q = 0, P = 2, Q = 2
arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(0, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
# p = 1, q = 1, P = 2, Q = 2
arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML"))
# p = 1, q = 1, P = 2, Q = 2 (both ar1 and ma1 set to 0)
arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, 0, NA, NA, NA, NA), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, 0, NA, NA, NA, NA), method = "ML"))
# p = 1, q = 1, P = 2, Q = 2 (ar1 set to 0)
arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, NA, NA, NA, NA, NA), method = "ML")
AICc(arima(prices_bc, order = c(1, 1, 1), seasonal = list(order = c(2, 0, 2), period = 4), fixed = c(0, NA, NA, NA, NA, NA), method = "ML"))
par(mfrow = c(1, 3))
source("plot.roots.R")
plot.roots(polyroot(c(1, 0.3223)), NULL, main = "Roots of Nonseasonal AR Component")
plot.roots(NULL, polyroot(c(1, -0.6068, 0.7883)), main = "Roots of Seasonal MA Component")
plot.roots(polyroot(c(1, -0.3821, 0.8471)), NULL, main = "Roots of Seasonal AR Component")
par(mfrow = c(1, 3))
fit1 <- arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 2), period = 4), method = "ML")
res1 <- residuals(fit1)
plot.ts(res1, main = "Plot of Residuals", xlab = "Year", ylab = "Value")
abline(h = mean(res1), col = "red")
hist(res1, main = "Histogram of Residual Values")
qqnorm(res1, main = "Normal Q-Q Plot of Residual Values")
qqline(res1, col = "blue")
par(mfrow = c(1, 2))
acf(res1, lag.max = 40, main = "ACF of Model 1 Residuals")
pacf(res1, lag.max = 40, main = "PACF of Model 1 Residuals")
shapiro.test(res1)
# Box-Pierce
Box.test(res1, lag = 12, type = "Box-Pierce", fitdf = 5)
# Box-Ljung
Box.test(res1, lag = 12, type = "Ljung-Box", fitdf = 5)
# McLeod-Li
Box.test((res1^2), lag = 12, type = "Ljung-Box", fitdf = 0)
ar(res1, aic = T, order.max = NULL, method = c("yule-walker"))
par(mfrow = c(1, 2))
plot.roots(polyroot(c(1, 0.3190)), NULL, main = "Roots of Nonseasonal AR Component")
plot.roots(polyroot(c(1, -0.1329, 0.2675)), NULL, main = "Roots of Seasonal AR Component")
par(mfrow = c(1, 3))
fit2 <- arima(prices_bc, order = c(1, 1, 0), seasonal = list(order = c(2, 0, 0), period = 4), method = "ML")
res2 <- residuals(fit2)
plot.ts(res2, main = "Plot of Residuals", xlab = "Year", ylab = "Value")
abline(h = mean(res2), col = "red")
hist(res2, main = "Histogram of Residual Values")
qqnorm(res2, main = "Normal Q-Q Plot of Residual Values")
qqline(res2, col = "blue")
par(mfrow = c(1, 2))
acf(res2, lag.max = 40, main = "ACF of Model 2 Residuals")
pacf(res2, lag.max = 40, main = "PACF of Model 2 Residuals")
shapiro.test(res2)
# Box-Pierce
Box.test(res2, lag = 12, type = "Box-Pierce", fitdf = 3)
# Box-Ljung
Box.test(res2, lag = 12, type = "Ljung-Box", fitdf = 3)
# McLeod-Li
Box.test((res2^2), lag = 12, type = "Ljung-Box", fitdf = 0)
ar(res2, aic = T, order.max = NULL, method = c("yule-walker"))
bc_pred <- predict(fit1, n.ahead = 7)
upper_pred <- bc_pred$pred + (2 * bc_pred$se)
lower_pred <- bc_pred$pred - (2 * bc_pred$se)
pred_ts <- ts(data = bc_pred$pred, start = c(2023, 1), end = c(2024, 3), frequency = 4)
ts.plot(prices_bc, xlim = c(1985, 2024), ylim = c(2.84, 2.88))
lines(upper_pred, col = "blue", lty = "dashed")
lines(lower_pred, col = "blue", lty = "dashed")
points(pred_ts, col = "red")
bc_pred <- predict(fit1, n.ahead = 7)
upper_pred <- bc_pred$pred + (2 * bc_pred$se)
lower_pred <- bc_pred$pred - (2 * bc_pred$se)
pred_ts <- ts(data = bc_pred$pred, start = c(2023, 1), end = c(2024, 3), frequency = 4)
ts.plot(prices_bc, xlim = c(1985, 2024), ylim = c(2.84, 2.88), main = "Forecast of Transformed Data using Model 1")
lines(upper_pred, col = "blue", lty = "dashed")
lines(lower_pred, col = "blue", lty = "dashed")
points(pred_ts, col = "red")
pred_ts
?InvBoxCox
og_pred_ts <- InvBoxCox(bc_pred$pred, lambda = optimal_lambda)
U = InvBoxCox(upper_pred, optimal_lambda)
L = InvBoxCox(lower_pred, optimal_lambda)
og_pred_ts <- InvBoxCox(bc_pred$pred, lambda = optimal_lambda)
U = InvBoxCox(upper_pred, optimal_lambda)
L = InvBoxCox(lower_pred, optimal_lambda)
ts.plot(prices_train, xlim = c(1985, 2024), main = "Forecast of Original Data using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
og_pred_ts <- InvBoxCox(bc_pred$pred, lambda = optimal_lambda)
U = InvBoxCox(upper_pred, optimal_lambda)
L = InvBoxCox(lower_pred, optimal_lambda)
ts.plot(prices_train, xlim = c(1985, 2024), ylim = c(50000, 225000), main = "Forecast of Original Data using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
og_pred_ts <- InvBoxCox(bc_pred$pred, lambda = optimal_lambda)
U = InvBoxCox(upper_pred, optimal_lambda)
L = InvBoxCox(lower_pred, optimal_lambda)
ts.plot(prices_train, xlim = c(1985, 2024), ylim = c(50000, 250000), main = "Forecast of Original Data using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
og_pred_ts <- InvBoxCox(bc_pred$pred, lambda = optimal_lambda)
U = InvBoxCox(upper_pred, optimal_lambda)
L = InvBoxCox(lower_pred, optimal_lambda)
ts.plot(prices_train, xlim = c(1985, 2024), ylim = c(50000, 300000), main = "Forecast of Original Data using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
og_pred_ts <- InvBoxCox(bc_pred$pred, lambda = optimal_lambda)
U = InvBoxCox(upper_pred, optimal_lambda)
L = InvBoxCox(lower_pred, optimal_lambda)
ts.plot(prices_train, xlim = c(1985, 2024), ylim = c(50000, 325000), main = "Forecast of Original Data using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
bc_pred <- predict(fit1, n.ahead = 7)
upper_pred <- bc_pred$pred + (2 * bc_pred$se)
lower_pred <- bc_pred$pred - (2 * bc_pred$se)
pred_ts <- ts(data = bc_pred$pred, start = c(2023, 1), end = c(2024, 3), frequency = 4)
ts.plot(prices_bc, xlim = c(1985, 2025), ylim = c(2.84, 2.88), main = "Forecast of Transformed Data using Model 1", xlab = "Year", ylab = "Price")
lines(upper_pred, col = "blue", lty = "dashed")
lines(lower_pred, col = "blue", lty = "dashed")
points(pred_ts, col = "red")
og_pred_ts <- InvBoxCox(bc_pred$pred, lambda = optimal_lambda)
U = InvBoxCox(upper_pred, optimal_lambda)
L = InvBoxCox(lower_pred, optimal_lambda)
ts.plot(prices_train, xlim = c(1985, 2025), ylim = c(50000, 325000), main = "Forecast of Original Data using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
ts.plot(prices_train, xlim = c(2020, 2025), ylim = c(50000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
ts.plot(prices_train, xlim = c(2020, 2025), ylim = c(140000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
par(mfrow = c(1, 2))
ts.plot(prices_train, xlim = c(2020, 2025), ylim = c(140000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
points(og_pred_ts, col = "red")
ts.plot(prices_train, xlim = c(2020, 2025), ylim = c(140000, 325000), main = "Forecast of Original Data Using Model 1", xlab = "Year", ylab = "Price")
lines(U, col = "blue", lty = "dashed")
lines(L, col = "blue", lty = "dashed")
lines(prices_test, col = "black")
points(og_pred_ts, col = "red")
prices_train
prices_test
