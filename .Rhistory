par(mfrow = c(1, 2))
acf(residuals, main = "ACF of Residuals")
pacf(residuals, main = "PACF of Residuals")
par(mfrow = c(1, 2))
acf(residuals, main = "ACF of Residuals", lag.max = 100)
pacf(residuals, main = "PACF of Residuals", lag.max = 100)
par(mfrow = c(1, 2))
acf(residuals, main = "ACF of Residuals", lag.max = 200)
pacf(residuals, main = "PACF of Residuals", lag.max = 200)
par(mfrow = c(1, 2))
acf(residuals, main = "ACF of Residuals", lag.max = 100)
pacf(residuals, main = "PACF of Residuals", lag.max = 100)
shapiro.test(residuals)
?shapiro.test
residuals <- residuals(fit.i)
residuals <- residuals(fit.i)
plot(residuals, main = "Plot of Residuals", ylab = "Residuals")
abline(h = 0)
hist(residuals, main = "Histogram of Residuals", xlab = "Values")
qqnorm(residuals, main = "Q-Q Norm Plot of Residuals")
qqline(residuals)
par(mfrow = c(1, 2))
acf(residuals, main = "ACF of Residuals", lag.max = 100)
pacf(residuals, main = "PACF of Residuals", lag.max = 100)
par(mfrow = c(1, 2))
acf(residuals, main = "ACF of Residuals", lag.max = 300)
pacf(residuals, main = "PACF of Residuals", lag.max = 300)
par(mfrow = c(1, 2))
acf(residuals, main = "ACF of Residuals", lag.max = 100)
pacf(residuals, main = "PACF of Residuals", lag.max = 100)
res_vals <- residuals(fit.i)
plot(res_vals, main = "Plot of Residuals", ylab = "Residuals")
res_vals <- residuals(fit.i)
plot(res_vals, main = "Plot of Residuals", ylab = "Residuals")
abline(h = mean(res_vals))
hist(res_vals, main = "Histogram of Residuals", xlab = "Values")
qqnorm(res_vals, main = "Q-Q Norm Plot of Residuals")
qqline(res_vals)
par(mfrow = c(1, 2))
acf(res_vals, main = "ACF of Residuals", lag.max = 100)
pacf(res_vals, main = "PACF of Residuals", lag.max = 100)
shapiro.test(res_vals)
?Box.test
sqrt(150)
# Box-Pierce test
Box.test(res_vals, lag = 12, type = "Box-Pierce", fitdf = 0)
# Ljung-Box test
Box.test(res_vals, lag = 12, type = "Ljung-Box", fitdf = 0)
# McLeod-Li test
Box.test((res_vals)^2, lag = 12, type = "Ljung-Box", fitdf = 0)
# Box-Pierce test
Box.test(res_vals, lag = 12, type = "Box-Pierce", fitdf = 0)
# Ljung-Box test
Box.test(res_vals, lag = 12, type = "Ljung-Box", fitdf = 0)
# McLeod-Li test
Box.test((res_vals)^2, lag = 12, type = "Ljung-Box", fitdf = 0)
?predict
?predict.Arima
predictions <- predict.Arima(fit.i, n.ahead = 6)
?predict.Arima
predictions <- predict.Arima(fit.i, n.ahead = 6)
predictions <- predict(fit.i, n.ahead = 6)
View(predictions)
?points
predictions <- predict(fit.i, n.ahead = 6)
plot(milk, main = "Plot of Milk TS Plus Predictions of Last 6 Values")
points(x = 151:156, y = predictions$pred, col = "red")
?plot
plot(train, main = "Plot of Milk TS Plus Predictions of Last 6 Values")
plot(x = 1:length(train), y = train, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l")
points(x = 151:156, y = predictions$pred, col = "red")
predictions <- predict(fit.i, n.ahead = 6)
plot(x = 1:length(train), y = train, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l")
points(x = 151:156, y = predictions$pred, col = "red")
predictions <- predict(fit.i, n.ahead = 6)
plot(x = 1:length(train), y = train, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l", xlim = c(1, 160))
points(x = 151:156, y = predictions$pred, col = "red")
predictions <- predict(fit.i, n.ahead = 6)
plot(x = 1:length(train), y = train, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l", xlim = c(1, 160))
points(x = 151:156, y = predictions$pred, col = "red")
points(x = 151:156, y = test, col = "blue")
predictions <- predict(fit.i, n.ahead = 6)
plot(x = 1:length(train), y = train, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l", xlim = c(1, 160))
points(x = 151:156, y = predictions$pred, col = "red", alpha = 0.5)
points(x = 151:156, y = test, col = "blue")
predictions <- predict(fit.i, n.ahead = 6)
plot(x = 1:length(train), y = train, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l", xlim = c(1, 160))
points(x = 151:156, y = predictions$pred, col = "red")
points(x = 151:156, y = test, col = "blue")
?points
predictions <- predict(fit.i, n.ahead = 6)
plot(x = 1:length(train), y = train, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l", xlim = c(1, 160))
points(x = 151:156, y = predictions$pred, col = "red", bg = "red")
points(x = 151:156, y = test, col = "blue")
predictions <- predict(fit.i, n.ahead = 6)
plot(x = 1:length(train), y = train, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l", xlim = c(1, 160))
points(x = 151:156, y = predictions$pred, col = "red", pch = 19)
points(x = 151:156, y = test, col = "blue")
predictions <- predict(fit.i, n.ahead = 6)
plot(x = 1:length(train), y = train, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l", xlim = c(1, 160))
points(x = 151:156, y = predictions$pred, col = "red", pch = 19)
points(x = 151:156, y = test, col = "blue", pch = 19)
plot(x = 151:156, y = test)
predictions <- predict(fit.i, n.ahead = 6)
plot(x = 1:length(train), y = train, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l", xlim = c(1, 160))
points(x = 151:156, y = predictions$pred, col = "red", pch = 19)
plot(x = 151:156, y = test, type = "l")
predictions <- predict(fit.i, n.ahead = 6)
plot(x = 1:length(milk), y = milk, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l", xlim = c(1, 160))
points(x = 151:156, y = predictions$pred, col = "red", pch = 19)
#plot(x = 151:156, y = test, type = "l")
predictions <- predict(fit.i, n.ahead = 6)
plot(x = 1:length(milk), y = milk, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l", xlim = c(1, 160))
points(x = 151:156, y = predictions$pred, col = "red")
#plot(x = 151:156, y = test, type = "l")
predictions <- predict(fit.i, n.ahead = 6)
plot(x = 1:length(milk), y = milk, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l")
points(x = 151:156, y = predictions$pred, col = "red")
#plot(x = 151:156, y = test, type = "l")
predictions <- predict(fit.i, n.ahead = 6)
plot(x = 1:length(milk), y = milk, main = "Plot of Milk TS Plus Predictions of Last 6 Values", type = "l", xlab = "Time")
points(x = 151:156, y = predictions$pred, col = "red")
#plot(x = 151:156, y = test, type = "l")
library(tidyverse)
library(readxl)
# read in data
housing <- read_xlsx("~/Desktop/PSTAT 174/Project/medians_po_mh.xlsx")
# remove first three rows (headers, column names)
housing <- housing[-c(1:3), ]
# rename variables
colnames(housing) <- c("area", "year", "quarter", "median_price")
# convert price to a numeric variable
housing$median_price <- as.numeric(housing$median_price)
# create time series from "median_price" variable
# frequency = number of observations per cycle (a year is a cycle)
prices <- ts(housing$median_price, frequency = 4, start = c(1985, 1))
# plot data
plot(prices, main = "Time Series of Median House Prices (USA) from 1985-2024", ylab = "Median Price in Dollars")
par(mfrow = c(1, 2))
# break down TS into seasonal, trend, and random components
prices_components <- decompose(prices)
plot(prices_components$seasonal, main = "Seasonal Component")
plot(prices_components$random, main = "Random Component")
par(mfrow = c(1, 2))
t <- 1:length(prices)
bc_trans <- MASS::boxcox(prices ~ t, plotit = F)
optimal_lambda <- bc_trans$x[which(bc_trans$y == max(bc_trans$y))]
prices_bc <- (1 / optimal_lambda) * (prices^optimal_lambda - 1)
paste("Variance of original data: ", var(prices))
paste("Variance of transformed data: ", var(prices_bc))
par(mfrow = c(1, 2))
plot(prices_bc)
plot(log(prices))
library(tidyverse)
library(readxl)
housing <- read_xlsx("~/Desktop/PSTAT 174/Project/medians_po_mh.xlsx")
housing <- housing[-c(1:3), ]
colnames(housing) <- c("area", "year", "quarter", "median_price")
housing$median_price <- as.numeric(housing$median_price)
prices <- ts(housing$median_price, frequency = 4, start = c(1985, 1))
plot(prices, main = "Time Series of Median House Prices (USA) from 1985-2024", ylab = "Median Price in Dollars")
par(mfrow = c(1, 2))
prices_components <- decompose(prices)
plot(prices_components$seasonal, main = "Seasonal Component")
plot(prices_components$random, main = "Random Component")
par(mfrow = c(1, 2))
t <- 1:length(prices)
bc_trans <- MASS::boxcox(prices ~ t, plotit = F)
optimal_lambda <- bc_trans$x[which(bc_trans$y == max(bc_trans$y))]
prices_bc <- (1 / optimal_lambda) * (prices^optimal_lambda - 1)
paste("Variance of original data: ", var(prices))
paste("Variance of transformed data: ", var(prices_bc))
y1 <- diff(prices_bc, lag = 4, differences = 1)
plot(y1)
y12 <- diff(y1, differences = 2)
plot(y12)
par(mfrow = c(1, 2))
plot(prices, main = "Original Data")
plot(y12, main = "Transformed Data")
par(mfrow = c(1, 2))
acf(y12, lag.max = 50)
pacf(y12, lag.max = 50)
library(pdftools)
pdf_combine(c("HW5.pdf", "174_Paper_HW5.pdf"), "PSTAT174HW5.pdf")
par(mfrow = c(1, 2))
plot(prices_bc)
plot(log(prices))
y1 <- diff(prices_bc, differences = 1, lag = 1)
plot(y1)
library(tidyverse)
library(readxl)
# read in data
housing <- read_xlsx("~/Desktop/PSTAT 174/Project/medians_po_mh.xlsx")
# remove first three rows (headers, column names)
housing <- housing[-c(1:3), ]
# rename variables
colnames(housing) <- c("area", "year", "quarter", "median_price")
# convert price to a numeric variable
housing$median_price <- as.numeric(housing$median_price)
# create time series from "median_price" variable
# frequency = number of observations per cycle (a year is a cycle)
prices <- ts(housing$median_price, frequency = 4, start = c(1985, 1))
# plot data
plot(prices, main = "Time Series of Median House Prices (USA) from 1985-2024", ylab = "Median Price in Dollars")
par(mfrow = c(1, 2))
# break down TS into seasonal, trend, and random components
prices_components <- decompose(prices)
plot(prices_components$seasonal, main = "Seasonal Component")
plot(prices_components$random, main = "Random Component")
par(mfrow = c(1, 2))
t <- 1:length(prices)
bc_trans <- MASS::boxcox(prices ~ t, plotit = F)
optimal_lambda <- bc_trans$x[which(bc_trans$y == max(bc_trans$y))]
prices_bc <- (1 / optimal_lambda) * (prices^optimal_lambda - 1)
paste("Variance of original data: ", var(prices))
paste("Variance of transformed data: ", var(prices_bc))
par(mfrow = c(1, 2))
plot(prices_bc)
plot(log(prices))
y1 <- diff(prices_bc, differences = 1, lag = 1)
plot(y1)
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
acf(y1)
pacf(y1)
par(mfrow = c(1, 2))
acf(y1, lag.max = 100)
pacf(y1, lag.max = 100)
par(mfrow = c(1, 2))
acf(y1, lag.max = 50)
pacf(y1, lag.max = 50)
y12 <- diff(y1, lag = 4, differences = 1)
plot(y12)
library(tidyverse)
library(tidymodels)
library(zoo)
library(MASS)
library(tsdl)
milk <- subset(tsdl, 12, "Agriculture")[[3]]
train <- milk[1:150]
test <- milk[151:156]
ts.plot(train, ylab = "Monthly milk production")
dmilk <- diff(train, 12)
ddmilk <- diff(dmilk, 1)
fit.i <- arima(train, order = c(0, 1, 0), seasonal = list(order = c(0, 1, 1), period = 12), method = "ML")
res_vals <- residuals(fit.i)
plot(res_vals, main = "Plot of Residuals", ylab = "Residuals")
abline(h = mean(res_vals))
hist(res_vals, main = "Histogram of Residuals", xlab = "Values")
qqnorm(res_vals, main = "Q-Q Norm Plot of Residuals")
qqline(res_vals)
par(mfrow = c(1, 2))
acf(res_vals, main = "ACF of Residuals", lag.max = 100)
pacf(res_vals, main = "PACF of Residuals", lag.max = 100)
shapiro.test(res_vals)
# Box-Pierce test
Box.test(res_vals, lag = 12, type = "Box-Pierce", fitdf = 0)
# Ljung-Box test
Box.test(res_vals, lag = 12, type = "Ljung-Box", fitdf = 0)
# McLeod-Li test
Box.test((res_vals)^2, lag = 12, type = "Ljung-Box", fitdf = 0)
ar(res_vals, aic = TRUE, order.max = NULL, method = c("yule-walker"))
setwd("~/Desktop/PSTAT 197/Projects/capstone-project2035")
library(tidyverse)
library(readxl)
library(httr)
## correct year variable, turn TOT_EMP into numeric variable
data <- read.csv("./Data//MSA_ALL_YEARS.csv") %>%
mutate(
year = year + 2000,
TOT_EMP = as.numeric(TOT_EMP)
)
View(data)
data$AREA_TITLE[data$AREA_TITLE == "Oxnard-Thousand Oaks-Ventura, CA"] <- "ventura"
data$AREA_TITLE[data$AREA_TITLE == "Ventura, CA PMSA"] <- "ventura"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Paso Robles, CA"] <- "san luis obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Paso Robles-Arroyo Grande, CA"] <- "san luis obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Atascadero-Paso Robles, CA MSA"] <- "san luis obispo"
data$AREA_TITLE[data$AREA_TITLE == "Santa Barbara-Santa Maria-Lompoc, CA MSA"] <- "santa barbara"
data$AREA_TITLE[data$AREA_TITLE == "Santa Maria-Santa Barbara, CA"] <- "santa barbara"
temp_county = NA
temp_label = NA
for (i in 1:nrow(data)){
if (is.na(data[i, ]$TOT_EMP)){
temp_county = data[i, ]$AREA_TITLE
temp_label = data[i, ]$label
data[i, ]$TOT_EMP = median(data$TOT_EMP[data$AREA_TITLE == temp_county & data$label == temp_label], na.rm = T)
}
}
## Total Job Counts Across Counties
ff_total_count <- data %>%
filter(label == "ff job") %>%
group_by(year) %>%
summarize(jobs = sum(TOT_EMP, na.rm = T))
green_total_count <- data %>%
filter(label == "green job") %>%
group_by(year) %>%
summarize(jobs = sum(TOT_EMP, na.rm = T))
View(ff_total_count)
data %>% unique(AREA_TITLE)
unique(data$AREA_TITLE)
## correct year variable, turn TOT_EMP into numeric variable
data <- read.csv("./Data//MSA_ALL_YEARS.csv") %>%
mutate(
year = year + 2000,
TOT_EMP = as.numeric(TOT_EMP)
)
data$AREA_TITLE[data$AREA_TITLE == "Oxnard-Thousand Oaks-Ventura, CA"] <- "ventura"
data$AREA_TITLE[data$AREA_TITLE == "Ventura, CA PMSA"] <- "ventura"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Paso Robles, CA"] <- "san luis obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Paso Robles-Arroyo Grande, CA"] <- "san luis obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Atascadero-Paso Robles, CA M"] <- "san luis obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Atascadero-Paso Robles, CA MSA"] <- "san luis obispo"
data$AREA_TITLE[data$AREA_TITLE == "San Luis Obispo-Paso Robles, CA"] <- "san luis obispo"
data$AREA_TITLE[data$AREA_TITLE == "Santa Barbara-Santa Maria-Lompoc, CA MSA"] <- "santa barbara"
data$AREA_TITLE[data$AREA_TITLE == "Santa Maria-Santa Barbara, CA"] <- "santa barbara"
data$AREA_TITLE[data$AREA_TITLE == "Santa Barbara-Santa Maria, CA"] <- "santa barbara"
data$AREA_TITLE[data$AREA_TITLE == "Santa Barbara-Santa Maria-Goleta"] <- "santa barbara"
unique(data$AREA_TITLE)
data$AREA_TITLE[data$AREA_TITLE == "Santa Barbara-Santa Maria-Goleta, CA"] <- "santa barbara"
unique(data$AREA_TITLE)
temp_county = NA
temp_label = NA
for (i in 1:nrow(data)){
if (is.na(data[i, ]$TOT_EMP)){
temp_county = data[i, ]$AREA_TITLE
temp_label = data[i, ]$label
data[i, ]$TOT_EMP = median(data$TOT_EMP[data$AREA_TITLE == temp_county & data$label == temp_label], na.rm = T)
}
}
ff_total_count <- data %>%
filter(label == "ff job") %>%
group_by(year) %>%
summarize(jobs = sum(TOT_EMP, na.rm = T))
green_total_count <- data %>%
filter(label == "green job") %>%
group_by(year) %>%
summarize(jobs = sum(TOT_EMP, na.rm = T))
## Job Counts by County
ff_county_count <- data %>%
filter(
label == "ff job"
) %>%
group_by(
year, AREA_TITLE
) %>%
summarize(
jobs = sum(TOT_EMP, na.rm = T)
)
green_county_count <- data %>%
filter(
label == "green job"
) %>%
group_by(
year, AREA_TITLE
) %>%
summarize(
jobs = sum(TOT_EMP, na.rm = T)
)
## Across All Counties
ff_total_count %>%
ggplot(
aes(x = year, y = jobs)
) +
geom_line() +
ylim(0, 500) +
labs(title = "Fossil Fuel Jobs Across Years") +
theme_bw()
## Across All Counties
ff_total_count %>%
ggplot(
aes(x = year, y = jobs)
) +
geom_line() +
ylim(0, 600) +
labs(title = "Fossil Fuel Jobs Across Years") +
theme_bw()
green_total_count %>%
ggplot(
aes(x = year, y = jobs)
) +
geom_line() +
ylim(0, 20000) +
labs(title = "Green Jobs Across Years") +
theme_bw()
green_total_count %>%
ggplot(
aes(x = year, y = jobs)
) +
geom_line() +
ylim(0, 30000) +
labs(title = "Green Jobs Across Years") +
theme_bw()
green_total_count %>%
ggplot(
aes(x = year, y = jobs)
) +
geom_line() +
ylim(0, 25000) +
labs(title = "Green Jobs Across Years") +
theme_bw()
## By County
ff_county_count %>%
ggplot(
aes(
x = year, y = jobs, color = AREA_TITLE
)
) +
geom_line() +
ylim(0, 425) +
labs(title = "Fossil Fuel Jobs by County") +
theme_bw()
## Job Counts by County
ff_county_count <- data %>%
filter(
label == "ff job"
) %>%
group_by(
year, AREA_TITLE
) %>%
summarize(
jobs = sum(TOT_EMP, na.rm = T)
)
green_county_count <- data %>%
filter(
label == "green job"
) %>%
group_by(
year, AREA_TITLE
) %>%
summarize(
jobs = sum(TOT_EMP, na.rm = T)
)
## By County
ff_county_count %>%
ggplot(
aes(
x = year, y = jobs, color = AREA_TITLE
)
) +
geom_line() +
ylim(0, 425) +
labs(title = "Fossil Fuel Jobs by County") +
theme_bw()
green_county_count %>%
ggplot(
aes(
x = year, y = jobs, color = AREA_TITLE
)
) +
geom_line() +
ylim(0, 12000) +
labs(title = "Green Jobs by County") +
theme_bw()
data %>%
filter(
is.na(TOT_EMP)
) %>%
View()
## correct year variable, turn TOT_EMP into numeric variable
data <- read.csv("./Data/MSA_ALL_YEARS.csv") %>%
mutate(
year = year + 2000,
TOT_EMP = as.numeric(TOT_EMP)
)
## Across All Counties
ff_total_count %>%
ggplot(
aes(x = year, y = jobs)
) +
geom_line() +
ylim(0, 600) +
labs(title = "Fossil Fuel Jobs Across Years") +
theme_bw()
## Across All Counties
ff_total_count %>%
ggplot(
aes(x = year, y = jobs)
) +
geom_line() +
ylim(0, 600) +
labs(title = "Fossil Fuel Jobs Across Years") +
theme_bw()
green_total_count %>%
ggplot(
aes(x = year, y = jobs)
) +
geom_line() +
ylim(0, 25000) +
labs(title = "Green Jobs Across Years") +
theme_bw()
## By County
ff_county_count %>%
ggplot(
aes(
x = year, y = jobs, color = AREA_TITLE
)
) +
geom_line() +
ylim(0, 425) +
labs(title = "Fossil Fuel Jobs by County") +
theme_bw()
green_county_count %>%
ggplot(
aes(
x = year, y = jobs, color = AREA_TITLE
)
) +
geom_line() +
ylim(0, 12000) +
labs(title = "Green Jobs by County") +
theme_bw()
